global !p
def math():
    return vim.eval('vimtex#syntax#in_mathzone()') == '1'
endglobal

snippet beg "begin{} / end{}" A
\begin{$1}
	$0
\end{$1}
endsnippet

# math mode

snippet lmm "in-line math" A
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet dmm "display math" A
\[$1\] $0
endsnippet

# subscripts

snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

# fractions

snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

# Basic proof symbols

context "math()"
snippet to "To" iA
\to
endsnippet

context "math()"
snippet in "In" iA
\in
endsnippet

context "math()"
snippet fa "Forall" iA
\forall
endsnippet

context "math()"
snippet neg "neg" iA
\neg
endsnippet

# https://castel.dev/post/lecture-notes-1/#latex-snippets

snippet txt "Text" iA
\text{$1}$0
endsnippet

# model logic scripts
context "math()"
snippet ld "Diamond" iA
\lozenge
endsnippet

context "math()"
snippet lb "Box" iA
\square
endsnippet

context "math()"
snippet mbf "mathbf" iA
\mathbf{$1}$0
endsnippet

context "math()"
snippet vd "vdash" A
\vdash
endsnippet

context "math()"
snippet vD "vDash" A
\vDash
endsnippet

context "math()"
snippet Vd "Vdash" A
\Vdash
endsnippet
